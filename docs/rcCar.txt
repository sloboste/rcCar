===============================================================================
Document: rcCar.txt
Description: Details the implementation and use of the microcomputer-controlled
             RC car
Author: Steven Sloboda
Version: 0.1
Last Updated: 04-02-2015
===============================================================================
TABLE OF CONTENTS
===============================================================================
Table of Contents

Chapter 1 - Introduction

Chapter 2 - RC Car

Chapter 3 - Raspberry Pi

Chapter 4 - Arduino

Chapter 5 - PWM Module

Chapter 6 - Circuitry

Chapter 7 - Communication Protocol

Chapter 8 - user guide / interface ???


===============================================================================
CHAPTER 1 - Introduction
===============================================================================
Section A: Overview
    This is the microcomputer-controlled RC car project. The purpose of this 
project was to take a stock RC car, strip it down, and put a microcomputer and
accompanying circuitry/components on it. The microcomputer determines how the 
car is controlled by running a software program that uses the RC car interface
defined in chapter ?. 

Section B: Components
    The project consists of the following components:
> an RC car (originally a Team Associated (ae) SC10
> a Raspberry Pi Model B microcomputer
> an Arduino Pro Mini 5V 16MHz
> an Adafruit 16 Channel 12-bit PWM/Servo Driver - I2C interface - PCA9685
> custom communication and power regulation circuitry  
> software for the Raspberry Pi and Arduino (www.github.com/sloboste/rcCar)

===============================================================================
CHAPTER 2 - RC Car
===============================================================================
Section A: Car
    The RC car that was selected for this project is the Team Associated (ae)
SC10 (short course) 1:10 scale, ready-to-run, 2WD, electric off road race
truck.

Section B: Radio Receiver
    The radio receiver has two channels that we are interested in. Channel 1 is
the steering servo PWM signal and channel 2 is the motor controller PWM signal.

Section C: Steering Servo Characteristics
?

Section D: Motor Controller Characteristics
?

===============================================================================
CHAPTER 3 - Raspberry Pi
===============================================================================
Section A: Hardware
    This project uses the Raspberry Pi Model B. Other models of Raspberry Pi
most likely could be used instead, but the documentation will only describe how
to use the Model B. Revision 1 and revision 2 of the Raspberry Pi Model B are
compatible with this project. 

Section B: Operating System
    The Raspberry Pi in this project runs the 2014-12-24 version of the 
raspbian-wheezy operating system. Here is a helpful installation tutorial:
http://elinux.org/RPi_Hub#Getting_Started

Section C: Software Packages
    This project uses several software packages that need to be installed on
the Raspberry Pi. Following is a list of those packages:
- i2c-tools
- python-smbus 
Here is a helpful installation tutorial:
http://www.instructables.com/id/Raspberry-Pi-I2C-Python/?ALLSTEPS

Section D: Usefulness
    The Raspberry Pi is used in this project as an interface for the vehicle
controller algorithm (not part of this project), which is assumed to be written
in python. The Raspberry Pi would not be necessary if the vehicle controller
algorithm were written in a language supported by most development environments
for MCUs, such as C/C++. The use of the Raspberry Pi was a specification for
this project, but it is one that introduced what may be unneccessary complexity
from the point of view of the embedded system developer.

===============================================================================
CHAPTER 4 - Arduino
===============================================================================
Section A: Hardware
    This project uses the Arduino Pro Mini 5V 16MHz (ATMEGA 328) MCU. No 
Modifications were made to the Arduino for this project. A 5V logic FTDI cable
is needed to program the Arduino.

Section B: Development Environment
    The standard Arduino IDE was used for this project to develop the code that
runs on the MCU.

Section C: Arduino Libraries
    This project uses some of the standard Arduino libraries included with the 
IDE, including Wire and Serial (for debugging). A library written by Adafruit
for the external PWM board is used as well, and must be downloaded and saved in
the "libraries" sub-directory of the "arduino" directory. The Adafruit PWM
board library can be obtained at the following url:
https://github.com/adafruit/Adafruit-PWM-Servo-Driver-Library

Section D: The Program
    The Arduino runs a program that consists of the setup function and the loop
function. The setup function configures the appropriate I/O pins, configures
the Wire library with an I2C address (see Chapter ?), configures the PWM board,
and registers functions to handle a reads and writes by the I2C master from or
to the address. The loop function will do one of several things depending on a
variable "mode," which indicates mode that the Arduino is currently in. The
"mode" can be one of the following:
> MODE_IDLE : the Arduino keeps the speed and turning direction of the RC car 
              at neutral positions
> MODE_RC   : the Arduino sets the speed and turning direction of the RC car
              according to the signals it receives from the radio controller
> MODE_RPI  : the Arduino sets the speed and turning direction of the RC car
              according to the commands it receives from the Raspberry Pi
In order to set the speed and turning direction of the RC car, the Adafruit
PWM board library is used, which sends I2C commands to the PWM board.

===============================================================================
CHAPTER 5 - PWM Module
===============================================================================
Section A: Hardware
    The PWM board used is the Adafruit 16 Channel 12-bit PWM/Servo Driver - I2C
interface - PCA9685. This product is available for purchase on the Adafruit
website (product number 815). A tutorial on how to use the board is available
at the following url: https://learn.adafruit.com/16-channel-pwm-servo-driver 

Section B: Connections
    The PWM board is connected to the I2C bus and should only be sent commands 
by the Arduino. The I2C address for the board is set by soldering jumpers on
the board, and is specified in Chapter ?. The steering servo is connected to 
channel 0 of the PWM board and the motor controller is connected to channel 1.

===============================================================================
CHAPTER 6 - Circuitry
===============================================================================
?

===============================================================================
CHAPTER 7 - Communication Protocol
===============================================================================
?

===============================================================================
END OF DOCUMENT

